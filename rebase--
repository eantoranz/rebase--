#!/bin/env python3

# Copyright 2025 Edmundo Carmona Antoranz
# Released under the terms of GPLv2.0

import argparse
import pygit2
import typing
import sys

from rebasedashdash import RebaseAction
from rebasedashdash import die_with_error
from rebasedashdash import rebase


def get_commit(obj: pygit2.Object) -> pygit2.Commit:
    current_object = obj
    while True:
        if current_object is None:
            die_with_error(f"Could not get commit from {obj}")
        if isinstance(current_object, pygit2.Commit):
            return current_object
        if isinstance(current_object, pygit2.Tag):
            current_object = current_object.get_object()
        else:
            current_object = None  # force the error


########################
# STARTING THE MAIN PART
########################

parser = argparse.ArgumentParser(description="Simplified implementation of rebase")

parser.add_argument("upstream", type=str, help="What to use as the upstream.")
parser.add_argument(
    "source",
    nargs="?",
    default=None,
    type=str,
    help="What to rebase. Default: current branch.",
)
parser.add_argument(
    "--onto",
    default=None,
    type=str,
    help="Rebase on top of this committish instead of upstream.",
)
parser.add_argument(
    "--verbose",
    action="store_true",
    default=False,
    help="Provide more information if it fails.",
)
parser.add_argument(
    "--for-real",
    "-4r",
    action="store_true",
    default=False,
    help="Move to the resulting commit when done. It would update the reference if a local branch is rebased.",
)
parser.add_argument(
    "--stay",
    action="store_true",
    default=False,
    help='When running "for real", move the local reference _but_ do not move the working tree to the final commit of the rebase. '
    "This is useful to move local branches without moving the working tree around. "
    "It refuses to work if the local branch asked to rebased is the current branch.",
)
parser.add_argument(
    "--detach",
    action="store_true",
    default=False,
    help="Start working on the final commit of the rebase calculation on detached HEAD without moving a local referece."
    "It assumes that you are using --for-real/-4r.",
)
parser.add_argument(
    "--force",
    "-f",
    action="store_true",
    default=False,
    help="Avoid checks like having a clean working tree before switching. WARNING: Assume it will do a hard reset when finished.",
)

args = parser.parse_args()

repo = pygit2.Repository(".")


##########################################################################
# SANITY CHECKS INVOLVING THE OPTIONS THEMSELVES AND THE REPO/WORKING TREE
##########################################################################

# no point in using --detach with --stay
if args.detach and args.stay:
    die_with_error("Cannot use --detach together with --stay")

# it we are moving aroung, the working tree has to be clean
if (
    (args.for_real or args.detach)
    and not args.stay
    and not args.force
    and any(
        status
        for status in repo.status().values()
        if status != pygit2.enums.FileStatus.WT_NEW
    )
):
    if args.detach:
        die_with_error(
            "Asked to run detached but the working tree is not clean. Clean it up and try again or use --force."
        )
    die_with_error(
        'Asked to run "for real" but the working tree is not clean. Clean it up and try again or use --force.'
    )

#################################################################################
# END OF SANITY CHECKS INVOLVING THE OPTIONS THEMSELVES AND THE REPO/WORKING TREE
#################################################################################


##############################
# PARSING UPSTREAM/SOURCE/ONTO
##############################

try:
    upstream = get_commit(repo.revparse_single(args.upstream))
except Exception as e:
    die_with_error(f"Could not find upstream: {e}")

try:
    try:
        source_reference = repo.lookup_reference_dwim(
            args.source if args.source else "HEAD"
        )
        source = source_reference.peel(pygit2.Commit)
        if source_reference.name.startswith("refs/heads/"):
            source_local_reference = source_reference
        else:
            # not a local reference
            source_local_reference = None
    except Exception as e:
        # it might still be possible to get it from revparse_single
        source_local_reference = None
        source = get_commit(repo.revparse_single(args.source))
except Exception as e:
    die_with_error(f"Could not find source: {e}")

try:
    onto = get_commit(repo.revparse_single(args.onto) if args.onto else upstream)
except Exception as e:
    die_with_error(f"Could not find --onto: {e}")

#####################################
# END OF PARSING UPSTREAM/SOURCE/ONTO
#####################################


###########################################################################
# SANITY CHECKS INVOLVING OPTIONS AGAINST THE SELECTED UPSTREAM/SOURCE/ONTO
###########################################################################

# asking to stay and running \"for real", the source local reference must not be the local branch
if args.stay and args.for_real:
    if repo.head == source_local_reference:
        die_with_error(
            'Cannot run "for real" and "stay" if asking to rebase the branch that is currently checked out.'
        )

##################################################################################
# END OF SANITY CHECKS INVOLVING OPTIONS AGAINST THE SELECTED UPSTREAM/SOURCE/ONTO
##################################################################################


################
# RUNNING REBASE
################

# the items in the conflicts tuple: path, rebased object, original parents, rebased parents
conflicts: list[
    tuple[
        str,
        typing.Union[pygit2.Object, None],
        list[typing.Union[pygit2.Object, None]],
        list[typing.Union[pygit2.Object, None]],
    ]
] = []

REUSED_COMMITS_COUNTER = 0


def progress_hook(action: RebaseAction, information):
    global REUSED_COMMITS_COUNTER
    if action == RebaseAction.REBASED:
        counter, commits_count, _, _ = information
        sys.stderr.write(f"\rRebasing {counter}/{commits_count}")
    elif action == RebaseAction.REUSED:
        counter, commits_count, _ = information
        sys.stderr.write(f"\rRebasing {counter}/{commits_count}")
        REUSED_COMMITS_COUNTER += 1
    else:
        pass  # we do not care for the time being


result = rebase(repo, upstream, source, onto, conflicts, progress_hook)

if isinstance(result, tuple):
    reason, commit, commits_map = result
    print()
    if conflicts:
        print(f"There was a conflict rebasing commit {commit.id}")
        if args.verbose:
            print("Using the following parents for the commit (original => rebased)")
            for parent in commit.parents:
                rebased_parent = commits_map[parent.id]
                sys.stdout.write(f"\t{parent.id} => {rebased_parent.id}")
                if parent == rebased_parent:
                    sys.stdout.write(" (no change)")
                print()
            print()

        print(f"The following paths had conflicts")
        for conflict in conflicts:
            print(f"\t{conflict[0]}")
            if args.verbose:
                print(
                    f"\t\tObject being rebased: {conflict[1].id if conflict[1] else '-'}"
                )
                print("\t\tParent objects (original => rebased)")
                for original_parent, rebased_parent in zip(conflict[2], conflict[3]):
                    sys.stdout.write("\t\t\t")
                    sys.stdout.write(
                        str(original_parent.id) if original_parent else "-"
                    )
                    sys.stdout.write(" => ")
                    sys.stdout.write(str(rebased_parent.id) if rebased_parent else "-")
                    if original_parent == rebased_parent:
                        sys.stdout.write(" (no change)")
                    print()
        die_with_error(f"Aborting rebase due to conflicts on commit {commit.id}")
    die_with_error(f"{reason} on commit {commit.id}")
final_commit = result

print()
if REUSED_COMMITS_COUNTER:
    print(f"Reused commits: {REUSED_COMMITS_COUNTER}")
print("Rebase was successful")

#################
# REBASE FINISHED
#################


#############
# WRAPPING UP
#############

if not (args.for_real or args.detach) or args.stay:
    # we are not moving the working tree
    print("We are not moving the working tree.")
    if (
        args.stay and args.for_real
    ):  # we only adjust the local reference if running _for real_
        if source_local_reference is not None:
            # we are moving the source_local_reference only
            source_local_reference.set_target(final_commit.id)
            print(
                f"\t{source_local_reference.shorthand}:  {source_local_reference.peel(pygit2.Commit).id} => {final_commit.id}"
            )
            sys.exit(0)
    print(f"Final rebase commit: {final_commit.id}")
    if source_local_reference is not None:
        print(f"Local branch '{source_local_reference.shorthand}' did not move.")
    # we are done
    sys.exit(0)


#####################################
# MOVING THE WORKING TREE / REFERENCE
#####################################

# user asked to run "for real"
print("Moving the working tree, as requested")
if source_local_reference is not None and not args.detach:
    # we need to update the local reference
    source_local_reference.set_target(
        final_commit.id,
        f"rebase--: Moving local branch '{source_local_reference.shorthand}' after rebase",
    )

if args.detach or repo.head_is_detached or repo.head != source_local_reference:
    repo.set_head(
        final_commit.id
        if args.detach or source_local_reference is None
        else source_local_reference.name
    )

repo.checkout_tree(
    final_commit,
    strategy=pygit2.enums.CheckoutStrategy.FORCE,
)
if args.detach or source_local_reference is None:
    print(f"You are working on {final_commit.id} now")
else:
    print(
        f"The local branch '{source_local_reference.shorthand}' has been reset to {final_commit.id}"
    )
